/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
d*c = a, 1 <= d <= a, 1 <= c <= a, d inversly proportional to c, only need to test values up to (a^(1/2)), find the first number
with 250 divisors less than (a^(1/2))

What is the value of the first triangle number to have over five hundred divisors?
*/

object pe12 {


  def determineDivisors(number:Int) = {
    var divisors = 0
    val sqrt = Math.floor(Math.sqrt(number.toDouble)).toInt
    for (i <- 1 to sqrt)
      if (number % i == 0)
        divisors += 1

    2*divisors
  }

  def evaluateTriangleNumbers(divisorCount:Int) = {
    var diff = 2
    var triangleNum = 1
    while (determineDivisors(triangleNum) < divisorCount)
    {
      triangleNum += diff
      diff += 1
    }
    triangleNum
  }

  def solve = {
    val start = System.currentTimeMillis
    println("The solution is " + evaluateTriangleNumbers(500))
    println(System.currentTimeMillis - start + " ms")
  }

  def main(args: Array[String]) = {
    solve
  }

}
